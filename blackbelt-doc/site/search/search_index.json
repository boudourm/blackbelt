{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BlackBelt Cette documentation comporte l\u2019ensemble des comptes rendus de brainstorming et de sprint reviews men\u00e9s par l\u2019\u00e9quipe Syst\u00e8me e-commerce et Mobile (Sem) du service n\u00e9goce du Groupe SAMSE dans le cadre du projet BlcackBelt. BlackBelt est une solution qui permet aux d\u00e9veloppeurs d\u2019API REST de g\u00e9n\u00e9rer des Black-Box tests en utilisant le framework Karat\u00e9 . En combinant les biblioth\u00e8ques SpringFox cela donne la main au product owners de g\u00e9n\u00e9rer les tests directement \u00e0 partir de l\u2019interface Swagger UI. Ce projet \u00e0 \u00e9t\u00e9 r\u00e9alis\u00e9 dans le contexte du stage d\u2019\u00e9t\u00e9 2020 de Mehdi BOUDOUR au sein du Groupe SAMSE. Comptes rendus de brainstormings CR001 Premier point avec Thomas CAIATI CR002 Pr\u00e9sentation de Mauris bois par J\u00e9r\u00f4me TALIS CR003 Dernier point de Juin avec Thomas CAIATI CR004 D\u00e9marrage de T2A avec Thomas CAIATI CR005 Synth\u00e8se : Architecture et contraintes techniques","title":"Home"},{"location":"#blackbelt","text":"Cette documentation comporte l\u2019ensemble des comptes rendus de brainstorming et de sprint reviews men\u00e9s par l\u2019\u00e9quipe Syst\u00e8me e-commerce et Mobile (Sem) du service n\u00e9goce du Groupe SAMSE dans le cadre du projet BlcackBelt. BlackBelt est une solution qui permet aux d\u00e9veloppeurs d\u2019API REST de g\u00e9n\u00e9rer des Black-Box tests en utilisant le framework Karat\u00e9 . En combinant les biblioth\u00e8ques SpringFox cela donne la main au product owners de g\u00e9n\u00e9rer les tests directement \u00e0 partir de l\u2019interface Swagger UI. Ce projet \u00e0 \u00e9t\u00e9 r\u00e9alis\u00e9 dans le contexte du stage d\u2019\u00e9t\u00e9 2020 de Mehdi BOUDOUR au sein du Groupe SAMSE.","title":"BlackBelt"},{"location":"#comptes-rendus-de-brainstormings","text":"CR001 Premier point avec Thomas CAIATI CR002 Pr\u00e9sentation de Mauris bois par J\u00e9r\u00f4me TALIS CR003 Dernier point de Juin avec Thomas CAIATI CR004 D\u00e9marrage de T2A avec Thomas CAIATI CR005 Synth\u00e8se : Architecture et contraintes techniques","title":"Comptes rendus de brainstormings"},{"location":"res/CR001/","text":"CR001 Premier point avec Thomas CAIATI Date : 08-06-2020 Type : R\u00e9union Lieu : Pitet, SAMSE Groupe Headquarters, Echirolles Organisateur : Thomas CAIATI (Ing\u00e9nieur Informatique \u00e0 la SAMSE) Rapporteur : Mehdi BOUDOUR (\u00c9tudiant en Master MIAGE \u00e0 IM2AG) Pr\u00e9sents : Thomas CAIATI, Mehdi BOUDOUR Attention : Les sp\u00e9cifications \u00e9nonc\u00e9es sont admisent jusqu'\u00e0 red\u00e9finition dans les prochains comptes rendus. Le projet est nomm\u00e9 BlackBelt. Actuellement les API REST sont test\u00e9s \u00e0 l\u2019aide de Karat\u00e9 (fork de Cucumber pour API REST) et ils sont appel\u00e9s par Jenkins. D\u2019autres solutions de tests sont \u00e0 \u00e9tudier. Le but est de g\u00e9n\u00e9rer automatiquement les tests (par introspection Java et/ou lecture du JSON du Swagger) pour Karat\u00e9 ou autre. Etudier la possibilit\u00e9 d'appeler ces tests au d\u00e9marrage des applicatifs Les tests automatiquement g\u00e9n\u00e9r\u00e9s doivent imp\u00e9rativement \u00eatre modifiables manuellement. Les tests automatiquement g\u00e9n\u00e9r\u00e9s doivent reproduire le travail des tests actuellement \u00e9crits manuellement par l\u2019\u00e9quipe sem (Syst\u00e8me e-commerce et Mobile). D\u2019autres solutions doivent \u00eatre \u00e9tudi\u00e9es pour la g\u00e9n\u00e9ration des tests automatiques. Le client final de l\u2019application est le Product Owners de Sem (actuellement J\u00e9r\u00f4me TALIS). Un point est pr\u00e9vu avec le client dans les semaines qui suivent.","title":"CR001 Premier point avec Thomas CAIATI"},{"location":"res/CR001/#cr001-premier-point-avec-thomas-caiati","text":"Date : 08-06-2020 Type : R\u00e9union Lieu : Pitet, SAMSE Groupe Headquarters, Echirolles Organisateur : Thomas CAIATI (Ing\u00e9nieur Informatique \u00e0 la SAMSE) Rapporteur : Mehdi BOUDOUR (\u00c9tudiant en Master MIAGE \u00e0 IM2AG) Pr\u00e9sents : Thomas CAIATI, Mehdi BOUDOUR Attention : Les sp\u00e9cifications \u00e9nonc\u00e9es sont admisent jusqu'\u00e0 red\u00e9finition dans les prochains comptes rendus. Le projet est nomm\u00e9 BlackBelt. Actuellement les API REST sont test\u00e9s \u00e0 l\u2019aide de Karat\u00e9 (fork de Cucumber pour API REST) et ils sont appel\u00e9s par Jenkins. D\u2019autres solutions de tests sont \u00e0 \u00e9tudier. Le but est de g\u00e9n\u00e9rer automatiquement les tests (par introspection Java et/ou lecture du JSON du Swagger) pour Karat\u00e9 ou autre. Etudier la possibilit\u00e9 d'appeler ces tests au d\u00e9marrage des applicatifs Les tests automatiquement g\u00e9n\u00e9r\u00e9s doivent imp\u00e9rativement \u00eatre modifiables manuellement. Les tests automatiquement g\u00e9n\u00e9r\u00e9s doivent reproduire le travail des tests actuellement \u00e9crits manuellement par l\u2019\u00e9quipe sem (Syst\u00e8me e-commerce et Mobile). D\u2019autres solutions doivent \u00eatre \u00e9tudi\u00e9es pour la g\u00e9n\u00e9ration des tests automatiques. Le client final de l\u2019application est le Product Owners de Sem (actuellement J\u00e9r\u00f4me TALIS). Un point est pr\u00e9vu avec le client dans les semaines qui suivent.","title":"CR001 Premier point avec Thomas CAIATI"},{"location":"res/CR002/","text":"CR002 Pr\u00e9sentation de Mauris bois par J\u00e9r\u00f4me TALIS Date : 22-06-2020 Type : R\u00e9union Lieu : Pitet, SAMSE Groupe Headquarters, Echirolles Organisateur : J\u00e9r\u00f4me TALIS (Product Owner chez la SAMSE) Rapporteur : Mehdi BOUDOUR (\u00c9tudiant en Master MIAGE \u00e0 IM2AG) Pr\u00e9sents : J\u00e9r\u00f4me TALIS, Mehdi BOUDOUR Attention : Les sp\u00e9cifications \u00e9nonc\u00e9es sont admisent jusqu'\u00e0 red\u00e9finition dans les prochains comptes rendus. Les tests actuellement \u00e9crits par l\u2019\u00e9quipe Sem ne portent que sur la structure des donn\u00e9es renvoy\u00e9es par les API. Le besoin est essentiellement d\u2019automatiser le plus possible les tests sur les APIs \u00e0 leur livraison. Les tests faits doivent v\u00e9rifier la non r\u00e9gression des applicatifs. Si possible tester les cas limites. Les nouveaux tests doivent porter sur les valeurs des donn\u00e9es renvoy\u00e9es par les APIs afin d\u2019en v\u00e9rifier la coh\u00e9rence. Une interface graphique est envisageable \u00e0 la fin, mais l\u2019overview HTML de Cucumber est suffisante pour l\u2019instant. Une mise en place de ce cahier des charges a \u00e9t\u00e9 d\u00e9cid\u00e9e. Une fois r\u00e9alis\u00e9 il doit \u00eatre enrichi et valid\u00e9 suite au prochain point avec Thomas CAIATI.","title":"CR002 Pr\u00e9sentation de Mauris bois par J\u00e9r\u00f4me TALIS"},{"location":"res/CR002/#cr002-presentation-de-mauris-bois-par-jerome-talis","text":"Date : 22-06-2020 Type : R\u00e9union Lieu : Pitet, SAMSE Groupe Headquarters, Echirolles Organisateur : J\u00e9r\u00f4me TALIS (Product Owner chez la SAMSE) Rapporteur : Mehdi BOUDOUR (\u00c9tudiant en Master MIAGE \u00e0 IM2AG) Pr\u00e9sents : J\u00e9r\u00f4me TALIS, Mehdi BOUDOUR Attention : Les sp\u00e9cifications \u00e9nonc\u00e9es sont admisent jusqu'\u00e0 red\u00e9finition dans les prochains comptes rendus. Les tests actuellement \u00e9crits par l\u2019\u00e9quipe Sem ne portent que sur la structure des donn\u00e9es renvoy\u00e9es par les API. Le besoin est essentiellement d\u2019automatiser le plus possible les tests sur les APIs \u00e0 leur livraison. Les tests faits doivent v\u00e9rifier la non r\u00e9gression des applicatifs. Si possible tester les cas limites. Les nouveaux tests doivent porter sur les valeurs des donn\u00e9es renvoy\u00e9es par les APIs afin d\u2019en v\u00e9rifier la coh\u00e9rence. Une interface graphique est envisageable \u00e0 la fin, mais l\u2019overview HTML de Cucumber est suffisante pour l\u2019instant. Une mise en place de ce cahier des charges a \u00e9t\u00e9 d\u00e9cid\u00e9e. Une fois r\u00e9alis\u00e9 il doit \u00eatre enrichi et valid\u00e9 suite au prochain point avec Thomas CAIATI.","title":"CR002 Pr\u00e9sentation de Mauris bois par J\u00e9r\u00f4me TALIS"},{"location":"res/CR003/","text":"CR003 Dernier point de Juin avec Thomas CAIATI Date : 29-06-2020 Type : R\u00e9union Lieu : Pitet, SAMSE Groupe Headquarters, Echirolles Organisateur : Thomas CAIATI (Ing\u00e9nieur Informatique \u00e0 la SAMSE) Rapporteur : Mehdi BOUDOUR (\u00c9tudiant en Master MIAGE \u00e0 IM2AG) Pr\u00e9sents : Thomas CAIATI, Mehdi BOUDOUR Attention : Les sp\u00e9cifications \u00e9nonc\u00e9es sont admisent jusqu'\u00e0 red\u00e9finition dans les prochains comptes rendus. Une fonctionnalit\u00e9 requise de la solution BlackBelt est de g\u00e9n\u00e9rer les tests automatiques d\u2019API par introspection Java en prenant le REST Controller en param\u00e8tres. BlackBelt doit pouvoir aussi g\u00e9n\u00e9rer des tests pertinents en prenant uniquement les endpoints en entr\u00e9e au lieu du controller. Les Endpoint sont compos\u00e9s du nom de domaine + chemin menant vers la ressource. Les tests peuvent aussi \u00eatre g\u00e9n\u00e9r\u00e9s en exploitant le JSON de Swagger Le but est vraiment d\u2019\u00e9tudier diff\u00e9rentes solutions de tests pr\u00e9sentes sur le march\u00e9.","title":"CR003 Dernier point de Juin avec Thomas CAIATI"},{"location":"res/CR003/#cr003-dernier-point-de-juin-avec-thomas-caiati","text":"Date : 29-06-2020 Type : R\u00e9union Lieu : Pitet, SAMSE Groupe Headquarters, Echirolles Organisateur : Thomas CAIATI (Ing\u00e9nieur Informatique \u00e0 la SAMSE) Rapporteur : Mehdi BOUDOUR (\u00c9tudiant en Master MIAGE \u00e0 IM2AG) Pr\u00e9sents : Thomas CAIATI, Mehdi BOUDOUR Attention : Les sp\u00e9cifications \u00e9nonc\u00e9es sont admisent jusqu'\u00e0 red\u00e9finition dans les prochains comptes rendus. Une fonctionnalit\u00e9 requise de la solution BlackBelt est de g\u00e9n\u00e9rer les tests automatiques d\u2019API par introspection Java en prenant le REST Controller en param\u00e8tres. BlackBelt doit pouvoir aussi g\u00e9n\u00e9rer des tests pertinents en prenant uniquement les endpoints en entr\u00e9e au lieu du controller. Les Endpoint sont compos\u00e9s du nom de domaine + chemin menant vers la ressource. Les tests peuvent aussi \u00eatre g\u00e9n\u00e9r\u00e9s en exploitant le JSON de Swagger Le but est vraiment d\u2019\u00e9tudier diff\u00e9rentes solutions de tests pr\u00e9sentes sur le march\u00e9.","title":"CR003 Dernier point de Juin avec Thomas CAIATI"},{"location":"res/CR004/","text":"CR004 D\u00e9marrage de BlackBelt avec Thomas CAIATI Date : 06-07-2020 Type : R\u00e9union Lieu : Pitet, SAMSE Groupe Headquarters, Echirolles Organisateur : Thomas CAIATI (Ing\u00e9nieur Informatique \u00e0 la SAMSE) Rapporteur : Mehdi BOUDOUR (\u00c9tudiant en Master MIAGE \u00e0 IM2AG) Pr\u00e9sents : Thomas CAIATI, Mehdi BOUDOUR Attention : Les sp\u00e9cifications \u00e9nonc\u00e9es sont admisent jusqu'\u00e0 red\u00e9finition dans les prochains comptes rendus. Premi\u00e8re solution envisageable suite \u00e0 l\u2019\u00e9tudes de l\u2019implementation SpringFox de Swagger est d\u2019exploiter la repr\u00e9sentation Json du API Controler \u00e9mise par SpringFox . Le Json r\u00e9cup\u00e9r\u00e9 sera donc traduit en test Karat\u00e9 . Les tests seront g\u00e9n\u00e9r\u00e9s pour chaque endpoint d\u2019un API individuellement en fichiers Karat\u00e9 . Un endpoint sera cr\u00e9\u00e9 pour chaque g\u00e9n\u00e9ration de tests. Une fois les tests individuellement cr\u00e9\u00e9s, un endpoint suppl\u00e9mentaire doit \u00eatre mit en place afin de g\u00e9n\u00e9rer l\u2019ensemble des tests de tous les endpoint d\u2019un API La transformation doit se faire en Java pure avec pour entr\u00e9e le Json SpringFox et sortie les fichier Karat\u00e9 de test. Une fois le parse Json To Karat\u00e9 termin\u00e9 on envisage la cr\u00e9ation d\u2019un custom plugIn SpringFox afin de documenter les endpoint de tests sur la SpringFox UI. Les fichiers de tests Karat\u00e9 sont structur\u00e9s en feature. Chaque feature contient un ou plusieurs sc\u00e9narios de tests. Chaque Sc\u00e9nario comporte diff\u00e9rentes lignes de tests unitaires \u00e9crites en langage cucumber.","title":"CR004 D\u00e9marrage de T2A avec Thomas CAIATI"},{"location":"res/CR004/#cr004-demarrage-de-blackbelt-avec-thomas-caiati","text":"Date : 06-07-2020 Type : R\u00e9union Lieu : Pitet, SAMSE Groupe Headquarters, Echirolles Organisateur : Thomas CAIATI (Ing\u00e9nieur Informatique \u00e0 la SAMSE) Rapporteur : Mehdi BOUDOUR (\u00c9tudiant en Master MIAGE \u00e0 IM2AG) Pr\u00e9sents : Thomas CAIATI, Mehdi BOUDOUR Attention : Les sp\u00e9cifications \u00e9nonc\u00e9es sont admisent jusqu'\u00e0 red\u00e9finition dans les prochains comptes rendus. Premi\u00e8re solution envisageable suite \u00e0 l\u2019\u00e9tudes de l\u2019implementation SpringFox de Swagger est d\u2019exploiter la repr\u00e9sentation Json du API Controler \u00e9mise par SpringFox . Le Json r\u00e9cup\u00e9r\u00e9 sera donc traduit en test Karat\u00e9 . Les tests seront g\u00e9n\u00e9r\u00e9s pour chaque endpoint d\u2019un API individuellement en fichiers Karat\u00e9 . Un endpoint sera cr\u00e9\u00e9 pour chaque g\u00e9n\u00e9ration de tests. Une fois les tests individuellement cr\u00e9\u00e9s, un endpoint suppl\u00e9mentaire doit \u00eatre mit en place afin de g\u00e9n\u00e9rer l\u2019ensemble des tests de tous les endpoint d\u2019un API La transformation doit se faire en Java pure avec pour entr\u00e9e le Json SpringFox et sortie les fichier Karat\u00e9 de test. Une fois le parse Json To Karat\u00e9 termin\u00e9 on envisage la cr\u00e9ation d\u2019un custom plugIn SpringFox afin de documenter les endpoint de tests sur la SpringFox UI. Les fichiers de tests Karat\u00e9 sont structur\u00e9s en feature. Chaque feature contient un ou plusieurs sc\u00e9narios de tests. Chaque Sc\u00e9nario comporte diff\u00e9rentes lignes de tests unitaires \u00e9crites en langage cucumber.","title":"CR004 D\u00e9marrage de BlackBelt avec Thomas CAIATI"},{"location":"res/CR005/","text":"CR005 Synth\u00e8se : Architecture et contraintes techniques. Date : 20-07-2020 Attention : Les sp\u00e9cifications \u00e9nonc\u00e9es sont admisent jusqu'\u00e0 red\u00e9finition dans les prochains comptes rendus. L\u2019approche de test des APIs REST entreprise doit couvrir certains points essentiels \u00e0 la qualit\u00e9 d\u2019une API. Input validation, tester l\u2019API avec diff\u00e9rents param\u00e8tres d\u2019entr\u00e9e et v\u00e9rifier la r\u00e9ponse, l\u2019API doit retourner un code HTTP 200 pour des param\u00e8tres valides et 400 pour des param\u00e8tres invalides. JSON format validation, v\u00e9rifier que le JSON renvoy\u00e9 par l\u2019API est correctement structur\u00e9. Business Logic, il faudrait pouvoir v\u00e9rifier que l\u2019API respecte la logique m\u00e9tier qu\u2019elle est sens\u00e9e impl\u00e9menter. Negative test cases, il faut tester l\u2019API sur des param\u00e8tres invalides/null, des valeurs obligatoires manquantes/null, des formats de valeurs inattendus, un montant d\u00e9raisonnablement important de payload data comme des caract\u00e8res non-ASCII des strings et entiers trop longs. V\u00e9rifier si les exceptions sont bien g\u00e9r\u00e9es. Reliability tests - v\u00e9rifier si l\u2019API retourne constamment des r\u00e9ponses correctes ou est-ce-que des \u00e9checs arrivent souvent. Tests de s\u00e9curit\u00e9, tester si les utilisateurs non autoris\u00e9s peuvent acc\u00e9der commeme aux fonctionnalit\u00e9 de l\u2019API. Tests de coh\u00e9rence/synchronisation, est-ce-que les donn\u00e9es retourn\u00e9es changent si la base de donn\u00e9es subit un changement d\u2019\u00e9tat. L\u2019api-docs de Swagger est un JSON contenant toutes les informations concernant les Endpoints de l\u2019API \u00e0 tester. BlackBelt prend en entr\u00e9e l\u2019api-docs de swagger, filtrer ce document de toute donn\u00e9e inutilisable. Les Endpoints ainsi extraits permettront de disperser les donn\u00e9es de chaque Endpoint individuellement. Chaque Endpoint sera trait\u00e9 avec une approche de test dite Black-Box Testing des Restful API, c\u00e0d que BlackBelt pourra g\u00e9n\u00e9rer des cas de tests sans conna\u00eetre les d\u00e9tails internes de l\u2019API. Chaque Black-Box testing de Endpoint g\u00e9n\u00e9rera un fichier .feature Karat\u00e9 contenant les cas de tests suivants les points essentiels trait\u00e9s plus haut. BlackBelt doit pouvoir \u00eatre appel\u00e9 manuellement par les d\u00e9veloppeurs, cela se fera sous forme d\u2019application java. BlackBelt devra aussi permettre de proposer sur la SpringFox UI des Endpoints de g\u00e9n\u00e9ration de tests accessibles aux Product Owner. Pour cela il est n\u00e9cessaire de customiser Swagger UI de SpringFox afin que des Endpoints de g\u00e9n\u00e9rations de tests BlackBelt soient visibles. La conception du projet se fera en UML. Le d\u00e9veloppement de la solution en Java.","title":"CR005 Synth\u00e8se - Architecture et contraintes techniques."},{"location":"res/CR005/#cr005-synthese-architecture-et-contraintes-techniques","text":"Date : 20-07-2020 Attention : Les sp\u00e9cifications \u00e9nonc\u00e9es sont admisent jusqu'\u00e0 red\u00e9finition dans les prochains comptes rendus. L\u2019approche de test des APIs REST entreprise doit couvrir certains points essentiels \u00e0 la qualit\u00e9 d\u2019une API. Input validation, tester l\u2019API avec diff\u00e9rents param\u00e8tres d\u2019entr\u00e9e et v\u00e9rifier la r\u00e9ponse, l\u2019API doit retourner un code HTTP 200 pour des param\u00e8tres valides et 400 pour des param\u00e8tres invalides. JSON format validation, v\u00e9rifier que le JSON renvoy\u00e9 par l\u2019API est correctement structur\u00e9. Business Logic, il faudrait pouvoir v\u00e9rifier que l\u2019API respecte la logique m\u00e9tier qu\u2019elle est sens\u00e9e impl\u00e9menter. Negative test cases, il faut tester l\u2019API sur des param\u00e8tres invalides/null, des valeurs obligatoires manquantes/null, des formats de valeurs inattendus, un montant d\u00e9raisonnablement important de payload data comme des caract\u00e8res non-ASCII des strings et entiers trop longs. V\u00e9rifier si les exceptions sont bien g\u00e9r\u00e9es. Reliability tests - v\u00e9rifier si l\u2019API retourne constamment des r\u00e9ponses correctes ou est-ce-que des \u00e9checs arrivent souvent. Tests de s\u00e9curit\u00e9, tester si les utilisateurs non autoris\u00e9s peuvent acc\u00e9der commeme aux fonctionnalit\u00e9 de l\u2019API. Tests de coh\u00e9rence/synchronisation, est-ce-que les donn\u00e9es retourn\u00e9es changent si la base de donn\u00e9es subit un changement d\u2019\u00e9tat. L\u2019api-docs de Swagger est un JSON contenant toutes les informations concernant les Endpoints de l\u2019API \u00e0 tester. BlackBelt prend en entr\u00e9e l\u2019api-docs de swagger, filtrer ce document de toute donn\u00e9e inutilisable. Les Endpoints ainsi extraits permettront de disperser les donn\u00e9es de chaque Endpoint individuellement. Chaque Endpoint sera trait\u00e9 avec une approche de test dite Black-Box Testing des Restful API, c\u00e0d que BlackBelt pourra g\u00e9n\u00e9rer des cas de tests sans conna\u00eetre les d\u00e9tails internes de l\u2019API. Chaque Black-Box testing de Endpoint g\u00e9n\u00e9rera un fichier .feature Karat\u00e9 contenant les cas de tests suivants les points essentiels trait\u00e9s plus haut. BlackBelt doit pouvoir \u00eatre appel\u00e9 manuellement par les d\u00e9veloppeurs, cela se fera sous forme d\u2019application java. BlackBelt devra aussi permettre de proposer sur la SpringFox UI des Endpoints de g\u00e9n\u00e9ration de tests accessibles aux Product Owner. Pour cela il est n\u00e9cessaire de customiser Swagger UI de SpringFox afin que des Endpoints de g\u00e9n\u00e9rations de tests BlackBelt soient visibles. La conception du projet se fera en UML. Le d\u00e9veloppement de la solution en Java.","title":"CR005 Synth\u00e8se : Architecture et contraintes techniques."}]}